using System.Reflection;
using VEXEmcee.Objects.Exceptions;

namespace VEXEmcee.DB.Dynamo.Accessors
{
	public class TeamStats_Season
	{
		/// <summary>
		/// Retrieves a <see cref="Definitions.TeamStats_Season"/> object based on the specified composite key.
		/// </summary>
		/// <remarks>This method uses the composite key generated by <see
		/// cref="Definitions.TeamStats_Season.GetCompositeKey(int, int)"/>  to query the DynamoDB table. Ensure that the
		/// table schema and data are properly validated before calling this method.</remarks>
		/// <param name="seasonID">The unique identifier for the season. Must be a positive integer.</param>
		/// <param name="teamID">The unique identifier for the team. Must be a positive integer.</param>
		/// <returns>A <see cref="Definitions.TeamStats_Season"/> object representing the team statistics for the specified season and
		/// team. Returns <see langword="null"/> if no matching record is found.</returns>
		/// <exception cref="DynamoDBException">Thrown if an error occurs while accessing the DynamoDB database.</exception>
		public static async Task<Definitions.TeamStats_Season> GetByCompositeKey(int seasonID, int teamID)
		{
			try
			{
				await Common.ValidateTable<Definitions.TeamStats_Season>();
				Definitions.TeamStats_Season stats = await Dynamo.Context.LoadAsync<Definitions.TeamStats_Season>(Definitions.TeamStats_Season.GetCompositeKey(seasonID, teamID), teamID);
				return stats;
			}
			catch (DynamoDBException ex)
			{
				ex.LogException();
				throw;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception - {MethodBase.GetCurrentMethod()?.Name} - {ex.Message}");
				throw new DynamoDBException(11, $"Generic exception received: {ex.Message}");
			}
		}

		public static async Task Save(Definitions.TeamStats_Season stats)
		{
			try
			{
				await Common.ValidateTable<Definitions.TeamStats_Season>();
				await Dynamo.Context.SaveAsync(stats);
			}
			catch (DynamoDBException ex)
			{
				ex.LogException();
				throw;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception - {MethodBase.GetCurrentMethod()?.Name} - {ex.Message}");
				throw new DynamoDBException(13, $"Generic exception received: {ex.Message}");
			}
		}
	}
}
