using Amazon.DynamoDBv2.DataModel;
using System.Reflection;
using VEXEmcee.Objects.Exceptions;

namespace VEXEmcee.DB.Dynamo.Accessors
{
	public class TeamStats_CurrentEvent
	{
		/// <summary>
		/// Retrieves a <see cref="Definitions.TeamStats_CurrentEvent"/> object based on the specified composite key.
		/// </summary>
		/// <remarks>This method uses the composite key generated by <see
		/// cref="Definitions.TeamStats_CurrentEvent.GetCompositeKey(int, int)"/>  to query the DynamoDB table. Ensure that the
		/// table schema and data are properly validated before calling this method.</remarks>
		/// <param name="eventID">The unique identifier for the season. Must be a positive integer.</param>
		/// <param name="teamID">The unique identifier for the team. Must be a positive integer.</param>
		/// <returns>A <see cref="Definitions.TeamStats_CurrentEvent"/> object representing the team statistics for the specified season and
		/// team. Returns <see langword="null"/> if no matching record is found.</returns>
		/// <exception cref="DynamoDBException">Thrown if an error occurs while accessing the DynamoDB database.</exception>
		public static async Task<Definitions.TeamStats_CurrentEvent> GetByCompositeKey(int eventID, int teamID)
		{
			try
			{
				await Common.ValidateTable<Definitions.TeamStats_CurrentEvent>();
				Definitions.TeamStats_CurrentEvent stats = await Dynamo.Context.LoadAsync<Definitions.TeamStats_CurrentEvent>(Definitions.TeamStats_CurrentEvent.GetCompositeKey(eventID, teamID), eventID);
				return stats;
			}
			catch (DynamoDBException ex)
			{
				ex.LogException();
				throw;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception - {MethodBase.GetCurrentMethod()?.Name} - {ex.Message}");
				throw new DynamoDBException(12, $"Generic exception received: {ex.Message}");
			}
		}

		public static async Task<List<Definitions.TeamStats_CurrentEvent>> GetByEventID(int eventID)
		{
			try
			{
				List<Definitions.TeamStats_CurrentEvent> returnValue = [];
				await Common.ValidateTable<Definitions.TeamStats_CurrentEvent>();

				IAsyncSearch<Definitions.TeamStats_CurrentEvent> scanResult = Dynamo.Context.FromScanAsync<Definitions.TeamStats_CurrentEvent>(new Amazon.DynamoDBv2.DocumentModel.ScanOperationConfig()
				{
					FilterExpression = new Amazon.DynamoDBv2.DocumentModel.Expression
					{
						ExpressionStatement = "EventID = :eventID",
						ExpressionAttributeValues = new Dictionary<string, Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry>()
						{
							{":eventID", new Amazon.DynamoDBv2.DocumentModel.Primitive(eventID.ToString(), true) }
						}
					}
				});

				do
				{
					List<Definitions.TeamStats_CurrentEvent> tempItems = await scanResult.GetNextSetAsync();
					returnValue.AddRange(tempItems);
				} while (!scanResult.IsDone);

				return returnValue;
			}
			catch (DynamoDBException ex)
			{
				ex.LogException();
				throw;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception - {MethodBase.GetCurrentMethod()?.Name} - {ex.Message}");
				throw new DynamoDBException(15, $"Generic exception received: {ex.Message}");
			}
		}

		public static async Task Save(Definitions.TeamStats_CurrentEvent stats)
		{
			try
			{
				await Common.ValidateTable<Definitions.TeamStats_CurrentEvent>();
				await Dynamo.Context.SaveAsync(stats);
			}
			catch (DynamoDBException ex)
			{
				ex.LogException();
				throw;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Exception - {MethodBase.GetCurrentMethod()?.Name} - {ex.Message}");
				throw new DynamoDBException(14, $"Generic exception received: {ex.Message}");
			}
		}
	}
}
